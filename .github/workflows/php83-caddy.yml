name: Deploy new PHP83-Caddy Docker Image
on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        description: Environment to build and publish
        default: prod
        type: choice
        options:
          - dev
          - stage
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-image:
    name: Integrate last code on docker image and publish it on Ghcr.io
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v2

      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Semver release
        id: release
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-php83-caddy-${{ inputs.environment }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.release.outputs.tag }}
            type=sha,format=long

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v4
        with:
          push: true
          context: "{{defaultContext}}:PHP83-Caddy"
          build-args: APP_ENV=${{ inputs.environment }}
          target: ${{ inputs.environment }}
#          build-args: ARCH=${{ github.ref == format('refs/heads/{0}', 'main') && 'aarch64' || 'amd64' }}
#          platforms: ${{ github.ref == format('refs/heads/{0}', 'main') && 'linux/aarch64' || 'linux/amd64' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
